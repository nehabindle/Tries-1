class Solution {
    class TrieNode
        {
            TrieNode[] children = new TrieNode[26];
            String word;
            
            public TrieNode()
            {}
        }
    
    TrieNode root = new TrieNode();
    public void insert(String word)
    {
        TrieNode curr = root;
        
          for(int i=0;i<word.length();i++)
          {
            char c = word.charAt(i);
              if(curr.children[c-'a'] == null)
              {
                  curr.children[c-'a'] = new TrieNode();
              }
            curr = curr.children[c-'a'];
              
          }
          
        curr.word = word;
    }
    
    public String longestWord(String[] words) {
        
        for(String word:words)
        {
            insert(word);
        }
        
        Queue<TrieNode> queue = new LinkedList<>();
        
        TrieNode node = null;
        
        queue.add(root);
        
           while(!queue.isEmpty())
           {
               node = queue.poll();
               
               for(int i=25 ; i>=0 ; i--)
               {
                   if(node.children[i] != null && node.children[i].word != null)
                   {
                       queue.add(node.children[i]);
                   }
               }
               
               
           }
        return node.word;
    }
}
