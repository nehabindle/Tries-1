class Solution {
    class TrieNode
        {
            TrieNode[] children = new TrieNode[26];
            String word;
            
            public TrieNode()
            {}
        }
        
        TrieNode root = new TrieNode();
        
    public void insert(String word)
    {
        TrieNode curr = root;
        for(int i=0;i<word.length();i++)
        {
            char c = word.charAt(i);
            if(curr.children[c-'a'] == null)
            {
                curr.children[c-'a'] = new TrieNode();
            }
            
            curr=curr.children[c-'a'];
        }
        
        
        curr.word = word;
        
        
    }
    public String replaceWords(List<String> dict, String sentence) {
        //Buiding a Trie for words in dictionary
         StringBuilder sb = new StringBuilder();
        
        for(String s:dict)
        {
            insert(s);
        }
        
       
        
        for(String word:sentence.split("\\s+"))
        {
           if(sb.length() > 0)
        {
            sb.append(" ");
        }
            TrieNode curr = root;
            for(int i=0;i<word.length();i++)
            {
                char c = word.charAt(i);
                
                  if(curr.children[c-'a'] == null || curr.word !=null) break;
                 curr = curr.children[c-'a'];
            }
            
            String replacement = curr.word;
            if(replacement == null)
            {
                sb.append(word);
            }
            else
            {
                sb.append(replacement);
            }
        }
       return sb.toString();
    }
}
